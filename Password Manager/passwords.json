import os
from cryptography.fernet import Fernet
import base64
import getpass
import json

# Generate a key from the master password
def generate_key(master_password: str) -> bytes:
    # Use SHA256 to create a consistent key from the master password
    key = base64.urlsafe_b64encode(master_password.encode('utf-8'))
    return key[:32]  # Fernet requires a 32-byte key

# Encrypt data
def encrypt_data(data: str, key: bytes) -> str:
    fernet = Fernet(key)
    encrypted = fernet.encrypt(data.encode('utf-8'))
    return encrypted.decode('utf-8')

# Decrypt data
def decrypt_data(data: str, key: bytes) -> str:
    fernet = Fernet(key)
    decrypted = fernet.decrypt(data.encode('utf-8'))
    return decrypted.decode('utf-8')

# Load the password store
def load_password_store(filename: str) -> dict:
    if os.path.exists(filename):
        with open(filename, 'r') as file:
            return json.load(file)
    else:
        return {}

# Save the password store
def save_password_store(filename: str, password_store: dict):
    with open(filename, 'w') as file:
        json.dump(password_store, file)

# Add a new password
def add_password(password_store: dict, key: bytes):
    website = input("Enter the website name: ")
    username = input("Enter the username: ")
    password = getpass.getpass("Enter the password: ")

    encrypted_password = encrypt_data(password, key)
    password_store[website] = {'username': username, 'password': encrypted_password}
    print(f"Password for {website} added successfully.")

# Retrieve a password
def retrieve_password(password_store: dict, key: bytes):
    website = input("Enter the website name to retrieve the password: ")

    if website in password_store:
        username = password_store[website]['username']
        encrypted_password = password_store[website]['password']
        decrypted_password = decrypt_data(encrypted_password, key)
        print(f"Website: {website}")
        print(f"Username: {username}")
        print(f"Password: {decrypted_password}")
    else:
        print(f"No password found for {website}.")

# Delete a password
def delete_password(password_store: dict):
    website = input("Enter the website name to delete the password: ")

    if website in password_store:
        del password_store[website]
        print(f"Password for {website} deleted successfully.")
    else:
        print(f"No password found for {website}.")

# Main function to interact with the password manager
def main():
    filename = 'passwords.json'

    # Prompt for master password
    master_password = getpass.getpass("Enter your master password: ")

    # Generate encryption key from the master password
    key = generate_key(master_password)

    # Load existing password store
    password_store = load_password_store(filename)

    while True:
        print("\nPassword Manager")
        print("1. Add password")
        print("2. Retrieve password")
        print("3. Delete password")
        print("4. Exit")

        choice = input("Choose an option: ")

        if choice == '1':
            add_password(password_store, key)
            save_password_store(filename, password_store)
        elif choice == '2':
            retrieve_password(password_store, key)
        elif choice == '3':
            delete_password(password_store)
            save_password_store(filename, password_store)
        elif choice == '4':
            print("Exiting password manager.")
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == '__main__':
    main()
